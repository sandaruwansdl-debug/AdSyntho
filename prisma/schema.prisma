// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription
  subscription  Subscription?
  
  // Connected accounts
  adAccounts    AdAccount[]
  
  // Campaigns and data
  campaigns     Campaign[]
  insights      Insight[]
  
  // Auth
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  plan              String   @default("free") // free, pro, enterprise
  status            String   @default("active") // active, canceled, past_due
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdAccount {
  id                String   @id @default(cuid())
  userId            String
  platform          String   // facebook, google, tiktok, linkedin, twitter
  accountId         String   // Platform-specific account ID
  accountName       String
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  lastSyncAt        DateTime?
  syncStatus        String   @default("pending") // pending, syncing, success, error
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]
  
  @@unique([userId, platform, accountId])
}

model Campaign {
  id                String   @id @default(cuid())
  userId            String
  adAccountId       String
  platform          String
  campaignId        String   // Platform-specific campaign ID
  campaignName      String
  status            String   // active, paused, completed, deleted
  objective         String?
  budget            Float?
  spend             Float    @default(0)
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  conversions       Int      @default(0)
  revenue           Float    @default(0)
  ctr               Float    @default(0)
  cpc               Float    @default(0)
  cpa               Float    @default(0)
  roas              Float    @default(0)
  startDate         DateTime?
  endDate           DateTime?
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  adAccount AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  insights Insight[]
  
  @@unique([adAccountId, campaignId])
}

model Insight {
  id                String   @id @default(cuid())
  userId            String
  campaignId        String?
  type              String   // optimization, opportunity, alert, trend
  title             String
  description       String
  impact            String   // high, medium, low
  confidence        Int      // 0-100
  action            String
  data              String?  // Additional insight data as JSON string
  isRead            Boolean  @default(false)
  isApplied         Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
}

model ApiLog {
  id                String   @id @default(cuid())
  userId            String?
  platform          String
  endpoint          String
  method            String
  statusCode        Int
  responseTime      Int      // milliseconds
  error             String?
  createdAt         DateTime @default(now())
}
